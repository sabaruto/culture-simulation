// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> InputImage;
int Resolution;

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // float2 aboveShift = float2(id.x, (id.y + 1) % 512);
    // float2 leftShift = float2((id.x -1) % 512, id.y);
    // float2 rightShift = float2((id.x + 1) % 512, id.y);
    // float2 bottomShift = float2(id.x, (id.y - 1) % 512);

    float radius = 1;
    int numSampledPixels = 0;
    Result[id.xy] = float4(0, 0, 0, 0);

    for (int x = -radius; x <= radius; x++)
    {
        float yRadius = sqrt(radius * radius - x * x);
        for (int y = -yRadius; y <= yRadius; y++)
        {
            float2 index = float2(x, y) + id.xy;
            if (index[0] < 0 || index[0] > Resolution || index[1] < 0 || index[1] > Resolution) { continue; }
            numSampledPixels++;

            Result[id.xy] = float4
            (
                Result[id.xy].x * (numSampledPixels - 1) + InputImage[index].x, 
                Result[id.xy].y * (numSampledPixels - 1) + InputImage[index].y, 
                Result[id.xy].z * (numSampledPixels - 1) + InputImage[index].z, 
                0.0
            );

            Result[id.xy] /= numSampledPixels;
        }
    }

    // Result[id.xy] = float4(
    //     (
    //         InputImage[id.xy].x + 
    //         InputImage[aboveShift].x + 
    //         InputImage[leftShift].x + 
    //         InputImage[rightShift].x + 
    //         InputImage[bottomShift].x
    //     ) / 5, 
    //     (
    //         InputImage[id.xy].y + 
    //         InputImage[aboveShift].y + 
    //         InputImage[leftShift].y + 
    //         InputImage[rightShift].y + 
    //         InputImage[bottomShift].y
    //     ) / 5, 
    //     InputImage[id.xy].z, 0.0);
}
